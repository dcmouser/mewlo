



//---------------------------------------------------------------------------
10/11/13
Write a more general purpose template/alias replacer, with support not just for global alias list,
 but local alias dictionaries, as well as the use of fallback defaults.
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
10/16/13
simplify mewlosite -- move some stuff to helpers
//---------------------------------------------------------------------------







//---------------------------------------------------------------------------
10/17/13
add LogFormat and LogModifier class
they would do things like format timestamp as readable text when writing to text file
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
10/18/13
Use pkg_resources to resolve filenames referring to controller functions, like pyramid does
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
10/18/13
note that we may need request information when generating urls, to know whether to use http or https, etc.
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
10/18/13
take another look at pyramids dual/"traversal" method of serving files.
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
10/22/13
write a dedicated ResponseContext class
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
10/23/13
decide how to handle url ? args
//---------------------------------------------------------------------------








//---------------------------------------------------------------------------
1/17/14
Make summary flowcharts/writeups of mewlo startup and url processing workflow steps involved.
//---------------------------------------------------------------------------




//---------------------------------------------------------------------------
1/17/14
Log requests and request errors in log
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
1/17/14
Adopt a naming convention for private vs public functions (see callables.py for example)
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
1/17/14
We register a python hook to catch python log events.  This works fine,
EXCEPT that such events happen without context -- i.e. without us knowing which MewloSite they belong to (if multiple sites are running)
We need to check what happens with regard to catching python logging hooks (see mlogger.py) when we have multiple sites running,
 and how we handle this.  This may require use of mglobals.mewlosite().  The idea would be to have either only one hook, and route it to log manager of the site identified by global as currently running, or let each site have their own hook and ignore when its not about our global site.
We also need to check if we let go of python hooks on logger shutdown.
#
NOTE: Looking at how our python hook is done (see mdbmanager_sqlalchemy.py, it *MAY* be that there is nothing to worry about, that we are hooking a particular instance of some object (e.g. sql alchemy instance) and so there is no overlap.
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
1/17/14
There are several places where we are creating some "clever" database models/table dynamically on the fly.
I'm not sure this is really a wise thing to do. For example see mdbmodel_fieldset.py
You can see this also with creating dynamic database-backed settings classes.
It might be better to explicitly create class definitions for these kinds of things.
Doing so explicitly would make it easier for us to customize, derive, and name these classes and tables, but mostly because it would make it easier to read the code and comport with our clarity-first guidelines.
//---------------------------------------------------------------------------




//---------------------------------------------------------------------------
1/17/14
can we move all database model class-based data to a helper object? or will sqlalchemy not let us
//---------------------------------------------------------------------------





//---------------------------------------------------------------------------
1/30/14
we are not properly checking for errors on database saves
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
1/30/14
wrap all non-core-python helper functions in wrapper classes
(mail sending, etc.)
//---------------------------------------------------------------------------




//---------------------------------------------------------------------------
1/30/14
pathprefix for route groups is not going to obey recursive relative paths
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
1/13/14
when rendering a view/template we currently build all aliases in preparation; this seems very inefficient.  can we smartly resolve aliases, or keep them always updated?
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
2/4/14
we have sqlalchemy-specific code in model classes -- we should probably delegate such code to the manager so that the models stay clean and engine neutral.
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
2/5/14
make (site+sitemanager) commandline functions all work with normal dictionaries, so we can simulate commandline calling programatically.
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
All of the manager components are built BEFORE we parse any settings;
this means it will be impossible to change the component classes via settings.
Think about this.
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
2/6/14
We are using a config helper in the site class to load from config/ files.
But if this is something purely up to the sure to use in their own configuration, maybe we should let it be a standalone utility class and not part of the mewlo stuff, just like using any other python library iff they want to or not.
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
2/22/14
option to not allow login until email verified
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
2/23/14
Return and collect all tuples from functions using () around them
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
2/24/14/
all pages that expect codes in urls should also allow them to be manually provided in form on that page (for security and convenience).
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
2/25/14
make it easier for controller actions to specify object functions
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
2/27/14
change the way _secret config files work -- let them easily overide any settings
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
2/28/14
Check and report clashes of things like routeids and navnodeids, at startup
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
2/28/14
consider whether new-user account initial email verifications should be of dif type than email CHANGE verifications
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
2/28/14
support template loading with special lines (like subject for emails);
use format:
@subject=
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
2/28/14
support the ability to overide menu urlargs on pages -- for example profile page links when viewing another profile
add example of viewing other user profiles
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
2/28/14
support forced re-password after long time since login
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
2/26/14
consider whether request.context and viewargs should be separate things
or should we just use context and not pass viewargs separately;
context is convenient in that it lets us add stuff piecemeal
UPDATE 3/2/14 -- behind the scenes viewargs are just merged into context, so in essence there is NO DIFFERENCE(!)
SO CONSIDER THIS ISSUE MOOT
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
3/1/14
Catch exceptions from controller control functions, and generate special responses for known ones
This would allow simple error views on exceptions and also allow redirection via exception, which would let us avoid doing things like:
    if (redirect_login()): return
from controller functions, and instead let us just do:
    redirect_login()
and let a function throw a redirect exception if it generated page rendering.
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
3/1/14
All navnodes should have option about whether to display navnode if the page is active.
//---------------------------------------------------------------------------

